/*
 * Generated by erpcgen {$erpcgenVersion} on {$todaysDate}.
 *
 * AUTOGENERATED - DO NOT EDIT
 */

#include "{$commonHeaderName}"
#include "client_manager.h"
#include "erpc_port.h"

using namespace erpc;
#if !(__embedded_cplusplus)
using namespace std;
#endif

extern ClientManager *g_client;
{$ constantsDefinitions(consts)}{$ structSerialHeader(structsTo2Core)}{$ structSerialSource(structsTo2Core)}{$ structDeserialHeader(structsTo1Core)}{$ structDeserialSource(structsTo1Core)}
{% for iface in interfaces %}
{%  for fn in iface.functions %}

// {$iface.name} interface {$fn.name} function client shim.
{$fn.prototype}
{
{%   if errVar != ""  %}
    erpc_status_t {$errVar}kErpcStatus_Success;

{%   endif %}
    // Get a new request.
{%   if !fn.isReturnValue %}
    RequestContext request = g_client->createRequest(true);
{%   else %}
    RequestContext request = g_client->createRequest(false);
{%   endif -- isReturnValue %}

    // Encode the request.
    Codec * out = request.getOutCodec();
{%   if generateAllocErrorChecks %}
    if (out == NULL)
    {
        {$allocErrVar}kErpcStatus_MemoryError;
    }
{%   endif %}
{$addInfraErrorChecks("    ", f_clientStartWriteMessage(fn.isReturnValue, iface.name, fn.name))}
{%   if fn.isSendValue %}
{%    for param in fn.parametersTo2Core %}
{%     if param.isNullable %}
{$ addInfraErrorChecks("    ", f_paramIsNullableEncode(param.coderCall))}{$loop.addNewLineIfNotLast}
{%     else -- isNullable %}
{$addInfraErrorChecks("    ", param.coderCall.encode(param.coderCall))}{$loop.addNewLineIfNotLast}
{%     endif -- isNullable %}
{%    endfor -- fn parametersTo2Core %}
{%   endif -- isSendValue %}

{$addInfraErrorChecks("    ", s_endWriteMessage)}

    // Send message to server
{$addInfraErrorChecks("    ", s_performRequest)}
{%   if fn.isReturnValue %}

{%    if fn.needEnumTmpClient %}
    int32_t enum_tmp_local;
{%    endif %}
    Codec * in;
{$addInfraErrorChecks("    ", f_checkInCodec())}
{%    if fn.needNullVariableOnClient %}
    bool isNull;
{%    endif -- needNullVariableOnClient %}
{%    for param in fn.parametersTo1Core %}
{%     if param.isNullable %}
{$addInfraErrorChecks("    ", f_paramIsNullableDecode(param, ""))}{$loop.addNewLineIfNotLast}
{%     else -- notNullable %}
{$> addIndent("    ", param.mallocClient)}
{$addInfraErrorChecks("    ", param.coderCall.decode(param.coderCall))}{$loop.addNewLineIfNotLast}
{%     endif -- isNullable %}
{%    endfor -- fn parametersTo1Core %}
{%    if fn.returnValue.type.isNotVoid %}
{%     if count(fn.parametersTo1Core) > 0 %}
{# need empty line for this case #}

{%     endif %}
    {$fn.returnValue.resultVariable};
{$> addIndent("    ", fn.returnValue.firstAlloc)}
{$addInfraErrorChecks("    ", fn.returnValue.coderCall.decode(fn.returnValue.coderCall))}
{%    endif -- isNotVoid %}
{$addInfraErrorChecks("    ", s_endReadMessage)}
{%   endif -- isReturnValue %}

    // Dispose of the request.
    g_client->releaseRequest(request);
{%   if errVar != ""  %}
{# Handle error #}

    if (err)
    {
        ClientManager::error_handler_t errorHandler = g_client->getErrorHandler();
        if (errorHandler != NULL)
        {
            (*errorHandler)(err);
        }
        {% if fn.returnValue.type.isNotVoid %}return {$fn.returnValue.errorReturnValue};{% endif -- isNotVoid %}
    }
{%   endif %}

    return{% if fn.returnValue.type.isNotVoid %} result{% endif -- isNotVoid %};
}
{%  endfor -- fn %}
{% endfor -- iface %}
